" $dotid$
" https://raw.githubusercontent.com/romainl/dotvim/master/vimrc

call plug#begin('~/.vim/plugged')

" Set performance options for large files (:Large, :Unlarge)
Plug 'vim-scripts/LargeFile'

" Easy visual undo tree (:UndotreeToggle or <F3>)
Plug 'mbbill/undotree'

"" Make it easy to make ASII tables (:TableModeToggle)
Plug 'dhruvasagar/vim-table-mode'

" Warn on syntax errors (enabled by default, disable with :SyntasticToggleMode
" or <F4>)
"Plug 'scrooloose/syntastic'

" Interpret colour escape codes (:AnsiEsc)
Plug 'vim-scripts/AnsiEsc.vim'

" Useful unicode related stuff (:SearchUnicode, :UnicodeName)
Plug 'chrisbra/unicode.vim'


""" My plugins
Plug '~/vim/auto_autoread.vim'
Plug '~/vim/autoswap_session.vim'
Plug '~/vim/complete_email.vim'
Plug '~/vim/startscreen.vim'
Plug '~/vim/helpline.vim'
Plug '~/vim/helplink.vim'
Plug '~/vim/mkdir.vim'
Plug '~/vim/multitabs.vim'
Plug '~/vim/sane_braces.vim'
"Plug '~/vim/search_highlight.vim'
Plug '~/vim/undofile_warn.vim'
Plug '~/vim/write_help.vim'
""Plug '~/vim/confirm_quit.vim'


"""" Filetypes
Plug 'groenewege/vim-less'        " LessCSS
Plug 'hail2u/vim-css3-syntax'     " Knows moar CSS rules
Plug 'kchmck/vim-coffee-script'   " CoffeeScipt
Plug 'rodjek/vim-puppet'          " Puppet
Plug 'slim-template/vim-slim'     " Slim templates
Plug 'vim-ruby/vim-ruby'          " Better ruby motions, completions


""" https://github.com/mattboehm/vim-unstack
"" http://www.vim.org/scripts/script.php?script_id=231
"" http://sheerun.net/2014/03/21/how-to-boost-your-vim-productivity/
"Plug 'terryma/vim-expand-region'
"Plug 'tpope/vim-repeat'
"Plug 'ervandew/supertab'
"Plug 'vim-scripts/MarkLines'
"Plug 'wellle/targets.vim'
"Plug 'vim-scripts/toggle_words.vim'
"Plug 'sk1418/Join'
"Plug 'vim-scripts/Smart-Tabs'
call plug#end()

" Expanded % functionality
runtime macros/matchit.vim

" Load my vimrc files
for f in split(glob('~/.vim/*.vim'), '\n')
	exe 'source ' . f
endfor


au CursorMovedI,CursorMoved *.tex let b:tex_textwidth = 80 | let b:tex_last_line = 0 | call ModifyTextWidth()

fun! ModifyTextWidth()
	" Only run if the cursor is on another line
	if line('.') == b:tex_last_line | return | endif
	let b:tex_last_line = line('.')

	" Try to find the start of an equation
	let l:eq = 0
	for i in range(1, 10)
		if getline(line('.') - i) =~ '^\\end{equation}' | break | endif

		" We're in an equation
		if getline(line('.') - i) =~ '^\\begin{equation}'
			set textwidth=0
			return
		endif
	endfor

	" Reset to original
	let &textwidth = b:tex_textwidth
endfunction


fun! DeleteBetween(start, end)
	" Reverse search for where we should start deleting
	execute '?' . a:start

	" Remember the line number
	let l:start = line('.')

	" Forward search for when we should stop deleting
	execute '/' . a:end

	" And delete the line range (:4,8d)
	execute ':' . l:start . ',' . line('.') . 'd'
endfun


fun! FixRef()
	:%s/<ref\(.\{-}\)>\[\(.\{-}\) \(.\{-}\)]\(.\{-}\)<\/ref>/<ref\1>{{a|1=\2|2=\3\4}}<\/ref>/
	:%s/<ref\(.\{-\}\)>\(http.\{-}\)<\/ref>/<ref\1>{{a|1=\2}}<\/ref>/
endfun


fun! MultiStr()
	if &filetype == 'python'
		let l:start = '"'
		let l:end = '"'
	elseif &filetype == 'ruby'
		let l:start = '"'
		let l:end = '" \'
	elseif &filetype == 'c'
		let l:start = '"'
		let l:end = '" +\'
	elseif &filetype == 'php'
		let l:start = '"'
		let l:end = '" .'
	else
		return
	endif
endfun

hi SpecialKey ctermfg=grey
let php_htmlInStrings = 1


fun! AutoCmd()
	" Find nearest cmd: 
	" Extract motion
	" Extract command
endfun

nnoremap <Leader>c call AutoCmd()
