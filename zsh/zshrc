set -u               # Undefined variables are an error.
ZDOTDIR=~/.zsh       # Store all zsh-related stuff in ~/.zsh/ instead of ~/

### Setup PATH
##############
typeset -U path  # No duplicates
path=()

# On some other systems /usr/bin links to /bin; use the full path to prevent dupes.
_prepath() {
	for dir in "$@"; do
		dir=${dir:A}
		[[ -d "$dir" ]] && path=("$dir" $path[@])
	done
}
_postpath() {
	for dir in "$@"; do
		dir=${dir:A}
		[[ -d "$dir" ]] && path=($path[@] "$dir")
	done
}

_prepath /bin /sbin /usr/bin /usr/sbin /usr/games
_prepath /usr/pkg/bin   /usr/pkg/sbin    # NetBSD
_prepath /usr/X11R6/bin /usr/X11R6/sbin  # OpenBSD
_prepath /usr/local/bin /usr/local/sbin

_postpath "/usr/lib/psql13/bin/"         # PostgreSQL 13 on Void
_prepath  "$HOME/.local/gobin"           # Go
_postpath "$HOME/.vim/pack/plugins/start/gopher.vim/tools/bin"
_prepath  "$HOME/.local/bin"             # My local stuff.
_postpath "$HOME/.gem/ruby/"*/bin(N[-1]) # Ruby
export BUNDLE_PATH="$HOME/.gem"          # Use gem path.

unfunction _prepath
unfunction _postpath

### Various env variables
#########################
[[ -n "${TMUX:-}" ]] && export TERM=screen-256color || export TERM=st-256color

# Helper; will be unset later.
_exists() { (( $+commands[$1] )) }

_exists vim      && export EDITOR=vim        # Default applications.
_exists firefox  && export BROWSER=firefox
_exists less     && export PAGER=less
_exists clang    && export CC=clang
_exists clang++  && export CXX=clang++

# Store stuff in ~/.config and ~/.cache when we can.
# https://github.com/grawity/dotfiles/blob/master/.dotfiles.notes
# https://www.reddit.com/r/zsh/comments/fvtr19/no_more_dotfile_clutter_in_my_home/
export LESSHISTFILE=~/.cache/lesshistory
export INPUTRC=~/.config/inputrc
export SQLITE_HISTORY=~/.cache/sqlite_history
export PSQLRC=~/.config/psqlrc
export PSQL_HISTORY=~/.cache/psql_history
export BUNDLE_USER_HOME=~/.cache/bundle
export GNUPGHOME=~/.config/gnupg
# GTK: $XDG_CONFIG_HOME/gtk-3.0/Compose
export XCOMPOSEFILE=~/.config/x11/compose
export XAUTHORITY=~/.config/x11/authority
export CRAWL_DIR=~/.config/crawl

# TODO
# Doesn't work? "startx ~/.config/x11/xinitrc"?
# export XINITRC=~/.config/x11/xinitrc
# export VIMINIT=":source ~/.config/vim/vimrc"
# export GEM_HOME=~/.cache/gem

export LANG=en_NZ.UTF-8               # Use Kiwiland for sane date format, metric system, etc.

export GOPATH=~/.cache/go             # GOPATH mostly stores cache stuff these days.
export GOCACHE=/tmp/go/build          # Go build cache in tmp/memory
export GOBIN=~/.local/gobin           # Go binaries ('go install').
export GOTMPDIR=/tmp/go/tmp           # tmp files during compile
[[ ! -d "$GOTMPDIR" ]] && mkdir -p "$GOTMPDIR"  # Make sure it exists as Go won't create it.

# Faster compiles.
export CFLAGS=-O0 CGO_CFLAGS=-O0 CGO_LDFLAGS=-O0

# R    Display colours escape chars as-is (so they're displayed).
# i    Ignore case unless pattern has upper case chars.
# M    Display line numbers and position.
# Q    Never ring terminal bell.
# X    Don't clear the screen on exit.
# L    Ignore LESSOPEN (some Linux distros set this by broken defaults (*cough* Fedora *cough*).
export LESS="RiMQXL"

export LS_COLORS="no=00:fi=00:di=34:ln=01;31:pi=34;43:so=31;43:bd=30;43:cd=30;43:or=01;35:ex=31:"
export GREP_COLOR=31                                           # Older GNU grep; BSD grep
export GREP_COLORS="ms=31:mc=31:sl=0:cx=0:fn=0:ln=0:bn=0:se=0" # Newer GNU grep, I guess GREP_COLOR was too easy to use
export RIPGREP_CONFIG_PATH=$HOME/.config/ripgrep
export PGHOST=/tmp
export PGDATABASE=goatcounter

export BLOCKSIZE=K                 # Output sizes in K instead of 512b blocks.
export MANWIDTH=80                 # Only needed with GNU stuff; use mandoc for better man.
export GTK_IM_MODULE=xim           # Make compose key work.
export QT_IM_MODULE=xim
export GTK_OVERLAY_SCROLLING=0     # Disable annoying "overlay scrollbar".
export SYSTEMD_PAGER=              # Don't output to a pager.
if [[ -d '/etc/service' ]]; then   # Set user service dir for runit.
	export SVDIR=/etc/service
elif [[ -d '/var/service' ]]; then
	export SVDIR=/var/service
fi
export XDG_RUNTIME_DIR=/tmp/xdg-runtime-$USER  # Needed for some programs.
mkdir -p $XDG_RUNTIME_DIR

# Run commands from this file on interactive session
[[ -f "$HOME/.local/python-startup" ]] && export PYTHONSTARTUP=~/.local/python-startup

# Update checks take a second and clobber output with annoying text.
export GH_NO_UPDATE_NOTIFIER=y

### Our work here is done if not an interactive shell
#####################################################
[[ -o interactive ]] || return 0

# Load zsh-completions
fpath=($HOME/.zsh/zsh-completions/src $fpath)

# Directory shortcuts
hash -d pack=$HOME/.cache/vim/pack/plugins/start
hash -d vim=/usr/local/share/vim/vim82
hash -d d=$HOME/code/arp242.net/_drafts
hash -d p=$HOME/code/arp242.net/_posts
hash -d go=/usr/lib/go/src
hash -d c=$HOME/code
hash -d gc=$HOME/code/goatcounter

setopt no_flow_control       # Disable ^S, ^Q, ^\
stty -ixon quit undef        # For Vim etc; above is just for zsh.
setopt notify                # Report status of bg jobs immediately
setopt no_hup                # Don't kill background jobs when exiting
setopt no_clobber            # Don't clobber existing files with > ....
#setopt clobber_empty         # ... but do allow overwriting existing empty files.
setopt append_create         # Refuse to create new files with >>
setopt no_beep               # Don't beep
setopt no_bg_nice            # Don't frob with nicelevels
setopt no_auto_remove_slash  # Don't guess when slashes should be removed (too magic)
setopt no_match              # Show error if globbing fails
setopt extended_glob         # More globbing characters
LISTMAX=999999               # Disable 'do you wish to see all %d possibilities'

### History
setopt append_history        # Append to history, rather than overwriting
setopt inc_append_history    # Append immediately rather than only at exit
setopt extended_history      # Store some metadata as well
setopt hist_no_store         # Don't store history or fc commands
setopt no_bang_hist          # Don't use ! for history expansion
setopt hist_ignore_dups      # Don't add to history if it's the same as previous event.
setopt hist_ignore_all_dups  # Remove older event if new event is duplicate.
HISTFILE=~/.zsh/history      # Store history here
HISTSIZE=11000               # Max. entries to keep in memory
SAVEHIST=10000               # Max. entries to save to file
HISTORY_IGNORE='([bf]g *|[bf]g|disown|cd ..|cd -)' # Don't add these to the history file.

### Prompt
setopt prompt_subst          # Expand parameters commands, and arithmetic in PROMPT

autoload -Uz vcs_info
zstyle ':vcs_info:*' enable git       # Enable just git.
zstyle ':vcs_info:*' formats '(%b)'   # Show branch.

set_prompt() {
	vcs_info >/dev/null 2>&1
	print -n "%(?..%130(?..%S%?%s))"           # Exit code in "standout" if non-0 and non-130 (^C to clear input)
	print -n "[%~]${vcs_info_msg_0_:-}%# "     # Directory and VCS info (if any).
}
PROMPT=$'$(set_prompt)'

_has_bat=$([[ -f /sys/bus/acpi/drivers/battery/PNP0C0A:00/power_supply/BAT0/capacity ]])
set_rprompt() {
	local host=    # Show hostname only for ssh connections; otherwise just the local time.
	[[ -n "${SSH_CLIENT:-}${SSH2_CLIENT:-}${SSH_CONNECTION:-}" ]] && host="%F{red}%U%B%m%b%u%f:"
	local bat=
	# https://unix.stackexchange.com/questions/189749/understanding-bashs-read-a-file-command-substitution
	# $(< "$FILE")
	if [[ "$_has_bat" -eq 0 ]];then 
		read bat </sys/bus/acpi/drivers/battery/PNP0C0A:00/power_supply/BAT0/capacity
		bat=":$bat%%"
	fi

	# power_now=0  # Plugged in
	print "${host}%T${bat}"
}
RPROMPT=$'$(set_rprompt)'


### Completion
##############
setopt complete_in_word      # Allow completion from within a word/phrase.
setopt always_to_end         # Move cursor to end of word when when completing from middle.
setopt no_list_ambiguous     # Show options on single tab press.

# Load and init
autoload -U compinit && compinit  # Load completion system.
zmodload zsh/complist             # Load interactive menu.

autoload -U select-word-style && select-word-style bash          # Only alphanumeric characters match a "word".
zstyle ':zle:*' word-chars '-_'                                  # Also match these additional characters as a "word".

zstyle ':completion:*'           menu select                     # Use menu for selecting.
zstyle ':completion::complete:*' use-cache on                    # Enable cache (not used by many completions).
zstyle ':completion:*:warnings'  format 'No completions'         # Warn when there are no completions
zstyle ':completion:*:default'   list-colors ${(s.:.)LS_COLORS}  # Show ls-like colours in file completion.
zstyle ':completion:*'           squeeze-slashes true            # "path//<Tab>" is "path/" rather than "path/*"
zstyle ':completion:*'           matcher-list 'm:{a-z}={A-Z}'    # Make completion case-insensitive.
zstyle ':completion:*:functions' ignored-patterns '_*'           # Ignore in completion.
zstyle ':completion:*:*files'    ignored-patterns '*?.pyc' '*?.o'

### Keys
########
bindkey -e              # Use the default "emacs" bindings.
export KEYTIMEOUT=10    # Time to wait for another key in multi-character sequences, in 1/100th second.

autoload -U up-line-or-beginning-search    && zle -N up-line-or-beginning-search
autoload -U down-line-or-beginning-search  && zle -N down-line-or-beginning-search
autoload -U edit-command-line              && zle -N edit-command-line

# So ideally we should use "zmodload zsh/terminfo" and then use $terminfo for
# some of the below, but on my system various entries are missing or wrong. So
# I'll guess I'll keep the ugly stuff below(?) For reference, you can list
# terminfo with (also, infocmp):
#
#   for k v in ${(kv)terminfo}; do printf '%-10s %q\n' "$k" "$v"; done

bindkey '^[[A'  up-line-or-beginning-search    # Arrow up
bindkey '^[OA'  up-line-or-beginning-search
bindkey '^p'    up-line-or-beginning-search
bindkey '^o'    up-line-or-beginning-search    # https://www.arp242.net/control-o.html
bindkey '^[[B'  down-line-or-beginning-search  # Arrow down
bindkey '^[OB'  down-line-or-beginning-search
bindkey '^n'    down-line-or-beginning-search
bindkey '^[[H'  beginning-of-line              # Home
bindkey '^[[1~' beginning-of-line
bindkey '^[[7~' beginning-of-line
bindkey '^[[F'  end-of-line                    # End
bindkey '^[[4~' end-of-line
bindkey '^[[8~' end-of-line
bindkey '^[[3~' delete-char                    # Delete
bindkey '^[[P'  delete-char
bindkey '^h'    backward-delete-char           # Backspace
bindkey '^?'    backward-delete-char
bindkey '^t'    edit-command-line              # Edit in Vim.
bindkey '^\'    accept-and-hold                # Run command without clearing commandline.
bindkey '^[[Z'  up-history                     # Shift+Tab; so it works in completion menu to go back.
bindkey '^[OP'  run-help                       # F1
bindkey -s '^[[5~' '\a'                        # Disable Page up/down; on my ThinkPad they're right next to the
bindkey -s '^[[6~' '\a'                        # arrow keys and pressing them by accident is annoying.


# Add "doas" at the start.
insert-doas() { zle beginning-of-line; zle -U "doas " }
zle -N insert-doas insert-doas && bindkey '^s' insert-doas

# Replace first word with "rm".
replace-rm()  { zle beginning-of-line; zle delete-word; zle -U "rm " }
zle -N replace-rm replace-rm && bindkey '^r' replace-rm

# Store the current input, and restore it with a second ^q
remember() {
	# Nothing in buffer: get previous command.
	if [[ $#BUFFER -eq 0 ]]; then
		print -ln "${stored:-}"
		stored=
	# Store current input.
	else
		stored=$BUFFER
		BUFFER=
	fi
}
zle -N remember remember && bindkey '^q' remember


### Commands
############
alias cp='cp -i'                        # Ask for confirmation when overwriting existing files.
alias mv='mv -i'
alias make='nice -n 20 make'            # Make can always be very nice.
alias free='free -m'                    # MB is more useful.
alias cal='cal -m'                      # Week starts on Monday.
alias ps='ps axu'                       # These are pretty much the only flags I use.
alias td='echo $(date +%Y-%m-%d)'       # "today"
alias now='echo $(date +%Y-%m-%d\ %T)'

# "git" and "go" already start with "g"; this is easier.
alias hub='NO_COLOR=y gh'

if [[ "$(uname)" = "Linux" ]]; then
	if [ -h /bin/ls ]; then   # Assume busybox
		alias ls='ls -F --color=never'
	else
		alias ls='ls -FN --color=auto' # -F adds trailing / etc; -N avoids adding quotes
	fi
	alias lc='ls -lh'              # "List Complete"
	alias la='ls -A'               # "List All"
	alias lac='ls -lhA'            # "List All Complete"
	alias lsd='ls -ld *(-/DN)'     # "List Directory"
	alias lh='ls -d .*'            # "List Hidden"
else
	alias ls='ls -F'
	alias la='ls -a'
	alias lc='ls -l'
	alias lac='ls -la'
fi

if _exists systemctl; then
	alias zzz='systemctl suspend'
	alias ZZZ='systemctl hibernate'
elif _exists pm-suspend; then
	alias zzz='pm-suspend'
	alias ZZZ='pm-hibernate'
fi

_exists bsdtar     && alias tar='bsdtar'
_exists htop       && alias top='htop'
_exists youtube-dl && alias youtube-dl='youtube-dl --no-part -o "%(title)s-%(id)s.%(ext)s"'
_exists sqlite3    && alias sqlite=sqlite3
_exists gpg2       && alias gpg=gpg2
_exists psql       && alias psql='LESS=S$LESS psql'  # Don't wrap

if _exists rg; then   # Prefer ripgrep if it exists; I'm so used to typing "ag".
	alias ag='rg'
elif _exists ag; then
	alias ag='ag -S --color-match 31 --color-line-number 35 --color-path 1\;4'
fi

if _exists vim; then
	alias vim="vim -p"
	alias vi="vim"
fi

unfunction _exists   # Unset helper.

alias sl='ls'        # Typos
alias l='ls'
alias c='cd'
alias vo='vi'
alias ci='vi'
alias iv='vi'
alias grpe='grep'
alias Grep='grep'
alias les='less'
alias les='less'
alias Less='less'
alias cd.='cd .'
alias cd..='cd ..'

autoload -U run-help run-help-git     # Smarter run-help; "git commit foo" will pull up git-commit(1), not git(1).
alias run-help >/dev/null && unalias run-help

alias curl='noglob curl'              # Disable globbing for some commands where we rarely want it;
alias find='noglob find'              # Allows typing e.g. "find . -name *.zsh" without quotes.

autoload -U zcalc                     # Get quick results for "zc 6*6", or just use "zc" to get zcalc
alias zc >/dev/null && unalias zc
zc() { [[ -n "$@" ]] && zcalc -e $@ || zcalc }
alias zc='noglob zc'

alias -g VV=' |& vim +S -'            # Global aliases to pipe output.
alias -g LL=' |& less'
alias -g GG=' |& grep'

# "ag edit" and "grep edit".
age() {
	IFS=$'\n' files=($(ag "$@" | cut -d: -f1 | sort -u))
	[[ -z "$files" ]] && return 1
	vim \
		+':silent! /\v'"${@[-1]/\//\\/}" \
		+':silent! tabdo :1 | normal! n' \
		+':tabfirst' \
		-p $files
}
grepe() {
	IFS=$'\n' files=($(ag "$@" | cut -d: -f1 | sort -u))
	[[ -z "$files" ]] && return 1
	vim \
		+':silent! /\v'"${@[-1]/\//\\/}" \
		+':silent! tabdo :1 | normal! n' \
		+':tabfirst' \
		-p $files
}

# For copying examples.
unprompt() { export PS1='$ ' RPROMPT=' ' }

# Restart ssh-agent after restarting WM or x11 (may be old env var in tmux).
reagent() {
	export SSH_AUTH_SOCK=$(echo /tmp/ssh-*/agent.*)
	ssh-add -l >/dev/null || ssh-add
}

# Get random commands.
rnd() {
	[[ "${2:-}" = "alpha" ]] && filter='[:punct:][:space:][:cntrl]' || filter='[:space:]'
	strings -n1 < /dev/urandom | tr -d "$filter" | head -c${1:-15}
	echo
}

# Create directory alias for the current directory.
hashcwd() { hash -d "$1"="$PWD" }

# "tmp go"
tgo() {
	tmp="$(mktemp -p /tmp -d "tgo_$(date +%Y%m%d)_XXXXXXXX")"
	printf 'package main\n\nfunc main() {\n\n}\n' > "$tmp/main.go"
	printf 'package main\n\nfunc TestMain(t *testing.T) {\n\n}\n\n' > "$tmp/main_test.go"
	printf 'func BenchmarkMain(b *testing.B) {\n\tb.ReportAllocs()\n\tfor n := 0; n < b.N; n++ {\n\t}\n}\n' >> "$tmp/main_test.go"

	printf 'module %s\n' "$(basename "$tmp")" > "$tmp/go.mod"
	(
		cd "$tmp"
		vim -p main.go main_test.go
		echo "$tmp"
	)
}

# Shorter cut.
cutt() { cut -f "${1}" -d "${2:- }" }

# Emit a "beep"; useful to notice when long-running commands are done:
#   takes_long_time; beep
beep() {
	l=$?
	timeout .1 speaker-test --frequency 500 --test sine >/dev/null 2>&1
	[[ $l -gt 0 ]] && { sleep .2; beep }  # Beep twice if the previous command failed.
	return 0
}

# Run sql files or commands.
sql() {
	cmd="psql -X -P linestyle=unicode -P null=NULL goatcounter"
	f="$HOME/docs/sql/scripts/$1"
	if [[ -f "$f" ]]; then
		eval "$cmd" < "$HOME/docs/sql/scripts/$1" | less -S
	else
		eval "$cmd" <<< "$1" | less -S
	fi
}
_sql() { _files -W ~/docs/sql/scripts }
compdef _sql sql

# sman, or "SQL man"; list completions just for the PostgreSQL manpages on SQL syntax.
sman() {
	if [[ ${@[(i)-w]} -le ${#@} ]]; then  # -w in ${@}?
		page=("${(@)@:#-w}")              # Remove -w from ${@}
		w=$(echo "${page%-13}" | tr '[[:upper:]]' '[[:lower:]]' | tr -d _)
		${BROWSER:-firefox} "https://www.postgresql.org/docs/current/sql-$w.html"
		return
	fi

	man $@-13 # Add back -13 since Void installs manpages as "SELECT-13".
}
_sman() {
	local x=()
	for f in /usr/share/man/man7/[A-Z]*.7; do
		f=${f%.7}
		f=${f%-13}
		x=($x ${f##*/})
	done

	_arguments "1: :{_describe 'page' x}"
}
compdef _sman sman


#### WIP commands


#  For example, if $chpwd_functions is an array containing the
#         values `mychpwd', `chpwd_save_dirstack'
#
# chpwd  Executed whenever the current working directory is changed.
#
# b() { }
# f() { }

# setopt auto_pushd
#AUTO_PUSHD
# setopt pushd_ignore_dups
#PUSHD_MINUS
#PUSHD_SILENT


# TODO: add "back", which is like "cd -" but goes back like browser; also "forward".
# b
# f
# b() { }
# f() { }

# REMEMBERING RECENT DIRECTORIES
#        The function cdr allo [..]

autoload -Uz chpwd_recent_dirs cdr add-zsh-hook
add-zsh-hook chpwd chpwd_recent_dirs
# zstyle ':chpwd:*' recent-dirs-insert 'always'
zstyle ':chpwd:*' recent-dirs-max 50
# zstyle ':chpwd:*' recent-dirs-prune 'parent'

alias recent=cdr  # Easier to type



# TODO: add to $chpwd_functions? Not sure of we need add-zsh-hook??
# autoload -Uz add-zsh-hook
# dir_hist=()
# dir_hist_idx=
# _hist() {
# 	dir_hist=(${dir_hist:0:100} "$PWD")
# 	dir_hist_idx=""
# }
# add-zsh-hook chpwd _hist
# 
# back() {
# 	if [[ -z $dir_hist_idx ]]; then
# 		dir_hist_idx=${#dir_hist}
# 	fi
# 	dir_hist_idx=$(( $dir_hist_idx - 1 ))
# 
# 	if [[ $dir_hist_idx -eq 0 ]]; then
# 		echo "At first entry"
# 		return 1
# 	fi
# 	cd -q ${dir_hist[$dir_hist_idx]}
# }
# 
# fwd() {
# 	if [[ -z $dir_hist_idx ]]; then
# 		echo "At last entry"
# 		return 1
# 	fi
# 
# 	dir_hist_idx=$(( $dir_hist_idx + 1 ))
# 	if [[ $dir_hist_idx -gt ${#dir_hist} ]]; then
# 		dir_hist_idx=""
# 		echo "At last entry"
# 		return 1
# 	fi
# 
# 	cd -q ${dir_hist[$dir_hist_idx]}
# }
# 
# hist() {
# 	echo "$dir_hist"
# 	echo "$dir_hist_idx"
# }


# go list -u -m $(go list -m -f '{{.Indirect}} {{.}}' all | grep '^false' | cut -d ' ' -f2) | grep '\['
